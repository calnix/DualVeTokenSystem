// SPDX-License-Identifier: BUSL-1.1
pragma solidity 0.8.27;

import {Pausable} from "openzeppelin-contracts/contracts/utils/Pausable.sol";
import {IAddressBook} from "./interfaces/IAddressBook.sol";
import {IAccessController} from "./interfaces/IAccessController.sol";
import {Errors} from "./libraries/Errors.sol";

/**
 * @title AccessControlCommon
 * @author Calnix
 * @notice Abstract contract providing common access control functionality
 * @dev Inherit from this to get addressBook integration and common modifiers
 */
abstract contract AccessControlCommon is Pausable {
    
    // Protocol registry
    IAddressBook public immutable addressBook;
    
    constructor(IAddressBook _addressBook) {
        require(address(_addressBook) != address(0), Errors.InvalidAddress());
        addressBook = _addressBook;
    }
    
    /**
     * @dev Get the AccessController instance from AddressBook
     * @return IAccessController The AccessController contract
     */
    function _getAccessController() internal view returns (IAccessController) {
        address accessControllerAddr = addressBook.getAccessController();
        require(accessControllerAddr != address(0), Errors.InvalidAddress());
        return IAccessController(accessControllerAddr);
    }
    
    // Common modifiers used across multiple contracts
    
    modifier onlyMonitor() {
        require(_getAccessController().isMonitor(msg.sender), Errors.OnlyCallableByMonitor());
        _;
    }
    
    modifier onlyGlobalAdmin() {
        require(_getAccessController().isGlobalAdmin(msg.sender), Errors.OnlyCallableByGlobalAdmin());
        _;
    }
    
    modifier onlyAssetManager() {
        require(_getAccessController().isAssetManager(msg.sender), Errors.OnlyCallableByAssetManager());
        _;
    }
    
    modifier onlyEmergencyExitHandler() {
        require(_getAccessController().isEmergencyExitHandler(msg.sender), Errors.OnlyCallableByEmergencyExitHandler());
        _;
    }
    
    modifier onlyCronJob() {
        require(_getAccessController().isCronJob(msg.sender), Errors.OnlyCallableByCronJob());
        _;
    }
}
